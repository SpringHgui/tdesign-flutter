const fs = require('fs');

const rootPath = process.cwd();
const appInfo = require(`${rootPath}/package.json`);
const inquirer = require('inquirer');

const readmeFilePath = `${rootPath}/CHANGELOG.md`;
const TEMPLATES = {
  PUBLISH: '发版通知',
  ENCOURAGE: '即时激励',
};

function generatePostBody(content) {
  return {
    msgtype: 'markdown',
    markdown: {
      content,
    },
  };
}

const {
  name: appName, version, homepage = '', bugs, repository,
} = appInfo;
let repoName = '';
let issueLink = '';
let repoLink = '';
if (bugs && bugs.url) {
  issueLink = bugs.url;
}
if (repository && repository.url) {
  repoLink = repository.url;
  repoName = repoLink.match(/(?<=com\/).+/);
}

async function generatePublishInfo(targetVersion) {
  if (!fs.existsSync(readmeFilePath)) {
    console.log('\x1b[33m%s\x1b[0m', `未找到 ${readmeFilePath} ，请使用 npm run changelog 生成。`);
    return;
  }
  const changelogStr = fs.readFileSync(readmeFilePath, 'utf8');
  const currentVersion = changelogStr.match(new RegExp(`(?<=## 🌈 ${targetVersion} .*\n).+?(?=\n## 🌈 \\d+.\\d+.\\d+)`, 's'));

  if (!currentVersion) {
    console.log('\x1b[33m%s\x1b[0m', `未找到${targetVersion}对应的 changelog 发布信息`);
    return;
  }

  const template = `### ${appName} 发布\n\n.\n\n- 版本：<font color="comment">${targetVersion}</font>\n- npm：[${appName}](https://npmjs.com/package/${appName})\n${repoName && `- GitHub：[${repoName}](${repoLink})\n`}${issueLink && `- issue: [issue](${issueLink})\n`}${homepage && `- 文档：[${homepage}](${homepage})\n`}\n\n`;
  let content = template.concat(currentVersion[0]).replaceAll('###', '\n\n###');
  const msg = generatePostBody(content);
  fs.writeFileSync(`${rootPath}/robotMsg.json`, JSON.stringify(msg), 'utf8');
  console.log('\x1B[32m%s\x1B[0m', '已生成企微机器人消息请打开 robotMsg.json 确认');
}

async function generateEncourageInfo(encourageList, encourageMonth) {
  const users = encourageList.split(',').map((user) => `<@${user}>`);
  const content = `恭喜 ${users.join(' ')} 获得 ${encourageMonth} 期 Oteam 即时激励，感谢各位同学为 TDesign 建设做出的贡献，榜单详细信息见：[https://techmap.woa.com/article/761](https://techmap.woa.com/article/761)`;
  const msg = generatePostBody(content);
  fs.writeFileSync(`${rootPath}/robotMsg.json`, JSON.stringify(msg), 'utf8');
  console.log('\x1B[32m%s\x1B[0m', '已生成企微机器人消息请打开 robotMsg.json 确认');
}

function generateRobotMsg() {
  inquirer
    .prompt([
      {
        type: 'list',
        message: '请选择模板',
        name: 'template',
        choices: [
          {
            name: TEMPLATES.PUBLISH,
            checked: true,
          },
          {
            name: TEMPLATES.ENCOURAGE,
          },
        ],
        validate(answer) {
          if (answer.length < 1) {
            return '请至少选择一个模板';
          }
          return true;
        },
      },
      {
        type: 'confirm',
        name: 'versionConfirm',
        message: `你想要生成 ${appName}@${version} 包的发布日志么？`,
        default: true,
        when(answers) {
          return answers.template === TEMPLATES.PUBLISH;
        },
      },
      {
        type: 'input',
        name: 'customVersion',
        message: '请输入你想要使用的版本号',
        when(answers) {
          return !answers.versionConfirm && answers.template === TEMPLATES.PUBLISH;
        },
      },
      {
        type: 'input',
        name: 'encourageList',
        message: '请输入要表彰的人员，多个时以英文逗号 "," 分隔',
        when(answers) {
          return answers.template === TEMPLATES.ENCOURAGE;
        },
      },
      {
        type: 'input',
        name: 'encourageMonth',
        message: '请输入即时激励榜单期数',
        when(answers) {
          return answers.template === TEMPLATES.ENCOURAGE;
        },
      },
    ])
    .then(async (answers) => {
      const {
        template, customVersion, encourageList, encourageMonth,
      } = answers;
      if (template === TEMPLATES.PUBLISH) {
        await generatePublishInfo(customVersion || version);
      } else {
        await generateEncourageInfo(encourageList, encourageMonth);
      }
    });
}

module.exports = generateRobotMsg;
